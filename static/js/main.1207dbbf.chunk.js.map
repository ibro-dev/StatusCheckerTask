{"version":3,"sources":["actions/types.js","actions/index.js","Pagestatus/Pagestatus.js","Pageslist/Pageslist.js","App.js","serviceWorker.js","reducers/index.js","reducers/contentReducer.js","store/index.js","index.js"],"names":["FETCH_CONTENTS","ADD_STATUS_PAGE_URL","addStatusPageUrlSuccess","data","type","payload","url","fetchContents","contents","Pagestatus","this","props","fetchPageContent","className","map","content","index","key","name","status","style","color","region","Component","mapDispatchToProps","dispatch","axios","get","then","response","connect","Pageslist","handlestatusPageChange","e","setState","target","value","onSubmit","preventDefault","addStatusPageUrl","state","checkLogin","onChange","placeholder","post","catch","error","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UACaA,G,YAAiB,kBACjBC,EAAsB,sB,iBCepBC,EAA2B,SAACC,GACvC,MAAO,CACLC,KAAMH,EACNI,QAAS,CACPC,IAAKH,EAAKG,OAcLC,EAAgB,SAACC,GAC1B,MAAO,CACLJ,KAAMJ,EACNQ,aCjCAC,E,YACF,aAAgB,uE,iFAKZC,KAAKC,MAAMC,qB,+BAIX,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,6BACVH,KAAKC,MAAMH,SAASM,KAAI,SAACC,EAASC,GAC/B,GAAc,IAAVA,GAAyB,KAAVA,EACvB,OACI,yBAAKC,IAAKD,GACN,yBAAKH,UAAU,gCACf,4BAAKE,EAAQT,KACT,yBAAKO,UAAU,uBACX,4BAAKE,EAAQG,OAEjB,yBAAKL,UAAU,uBACX,4BAAKE,EAAQI,OAAb,IAAqB,0BAAMC,MAAO,CAACC,MAAM,UAApB,oBAQzC,yBAAKR,UAAU,6BACVH,KAAKC,MAAMH,SAASM,KAAI,SAACC,EAASC,GAC/B,GAAc,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,EACtC,OACI,yBAAKC,IAAKD,GAEN,yBAAKH,UAAU,gCACf,4BAAKE,EAAQT,KACT,yBAAKO,UAAU,uBACX,4BAAKE,EAAQG,OAEjB,yBAAKL,UAAU,uBACf,4BAAKE,EAAQO,QACb,4BAAKP,EAAQO,SAEb,yBAAKT,UAAU,uBACf,4BAAKE,EAAQI,OAAb,IAAqB,0BAAMC,MAAO,CAACC,MAAM,UAApB,aACrB,4BAAKN,EAAQI,OAAb,IAAqB,0BAAMC,MAAO,CAACC,MAAM,UAApB,yB,GAhD5BE,aA+DnBC,EAAqB,CAAEZ,iBD1CG,WAC9B,OAAO,SAASa,GACd,OAAOC,IAAMC,IAAI,eAAeC,MAAK,SAAAC,GAEnCJ,EAASlB,EAAcsB,EAAS1B,KAAKA,aCwC5B2B,eALS,SAAC,GAAD,QAAGtB,SAAH,MAAwB,CAC5CA,cADoB,MAAc,GAAd,KAKgBgB,EAAzBM,CAA6CrB,GCjEtDsB,G,kBACF,aAAe,IAAD,8BACV,+CAMJC,uBAAyB,SAACC,GACtB,EAAKC,SAAS,CAAC5B,IAAK2B,EAAEE,OAAOC,SARnB,EAWdC,SAAW,SAACJ,GACRA,EAAEK,iBACF,EAAK3B,MAAM4B,iBAAiB,EAAKC,QAXjC,EAAKA,MAAQ,CACTlC,IAAK,IAHC,E,sEAgBJ,IAAD,OACL,OACI,yBAAKO,UAAU,aACX,0BAAMwB,SAAU,SAAAJ,GAAC,OAAI,EAAKQ,WAAWR,KACjC,6BACA,2BAAO7B,KAAO,OAAOc,KAAM,aAAakB,MAAQ1B,KAAK8B,MAAMlC,IAAMoC,SAAUhC,KAAKsB,uBAAwBW,YAAY,mDAEpH,2BAAOvC,KAAO,SAASgC,MAAQ,eAC/B,8BAEJ,kC,GA3BQb,cAyCPO,cACb,MATuB,SAAAL,GACvB,MAAO,CACHc,iBAAkB,SAAAjC,GAClBmB,EFpCwB,SAAC,GAAa,IAAXnB,EAAU,EAAVA,IAC/B,OAAO,SAACmB,GACN,OAAOC,IAAMkB,KAAN,UAJE,+BAIF,QAA4B,CAACtC,QACjCsB,MAAK,SAAAC,GACJJ,EAASvB,EAAwB2B,EAAS1B,UAE3C0C,OAAM,SAAAC,GACL,MAAMA,ME6BCP,CAAiBjC,QAKjBwB,CAGbC,GCfWgB,E,iLAzBX,OACE,yBAAKlC,UAAU,IACX,yBAAKA,UAAU,aACX,4BAAQA,UAAU,aACd,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,eAAhB,qBAKhB,6BAASA,UAAU,oBACf,yBAAKA,UAAU,aACX,6FAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAnBAU,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCfSC,kBAAgB,CAC3B7C,SCFW,WAA6C,IAArBgC,EAAoB,uDAAZ,GAAIc,EAAQ,uCACzD,OAAQA,EAAOlD,MACX,KAAKJ,EACL,OAAOsD,EAAO9C,SACd,KAAKP,EACL,MAAM,GAAN,mBAAWuC,GAAX,CAAkBc,EAAOjD,UAC3B,QACE,OAAOmC,M,QCLEe,EADDC,YAAYC,EAAaC,YAAgBC,MCKvDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SJqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.1207dbbf.chunk.js","sourcesContent":["export const FETCH_PAGE_DATA = \"FETCH_PAGE_DATA\";\nexport const FETCH_CONTENTS = \"FETCH_CONTENTS\";\nexport const ADD_STATUS_PAGE_URL = \"ADD_STATUS_PAGE_URL\";","import { FETCH_CONTENTS, ADD_STATUS_PAGE_URL } from \"./types\";\nimport axios from \"axios\";\n\nconst apiUrl = 'localhost:9000/statuspageurl';\n\nexport const addStatusPageUrl = ({ url }) => {\n    return (dispatch) => {\n      return axios.post(`${apiUrl}/add`, {url})\n        .then(response => {\n          dispatch(addStatusPageUrlSuccess(response.data))\n        })\n        .catch(error => {\n          throw(error);\n        });\n    };\n};\n  \n  export const addStatusPageUrlSuccess =  (data) => {\n    return {\n      type: ADD_STATUS_PAGE_URL,\n      payload: {\n        url: data.url,\n      }\n    }\n};\n\nexport const fetchPageContent = () => {\n  return function(dispatch) {\n    return axios.get('output.json').then(response => {\n        //console.log(response.data.data);\n      dispatch(fetchContents(response.data.data));\n    });\n  };\n}\n\nexport const fetchContents = (contents) => {\n    return {\n      type: FETCH_CONTENTS,\n      contents\n    }\n  };","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport './Pagestatus.css';\nimport { fetchPageContent } from \"../actions\";\n\nclass Pagestatus extends Component {\n    constructor () {\n        super();\n    }\n\n    componentDidMount() {\n        this.props.fetchPageContent();\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"status--section container\">\n                    {this.props.contents.map((content, index) => {   \n                        if (index === 6 || index === 12 ) {          \n                    return(\n                        <div key={index}>\n                            <div className=\"columns status--section__box\">\n                            <h2>{content.url}</h2>\n                                <div className=\"column btc--section\">\n                                    <h5>{content.name}</h5>\n                                </div>\n                                <div className=\"column eth--section\">\n                                    <h5>{content.status} <span style={{color:\"green\"}}> &#10004; </span></h5>\n                                </div>\n                            </div>\n                        </div>\n                        )}\n                    })}\n                </div>\n\n                <div className=\"status--section container\">\n                    {this.props.contents.map((content, index) => {   \n                        if (index === 0 || index === 2 || index === 4 ) {          \n                    return(\n                        <div key={index}> \n                            \n                            <div className=\"columns status--section__box\">\n                            <h2>{content.url}</h2>\n                                <div className=\"column btc--section\">\n                                    <h5>{content.name}</h5>\n                                </div>\n                                <div className=\"column btc--section\">\n                                <h5>{content.region}</h5>\n                                <h5>{content.region}</h5>\n                                </div>\n                                <div className=\"column eth--section\">\n                                <h5>{content.status} <span style={{color:\"green\"}}> &#10004; </span></h5>\n                                <h5>{content.status} <span style={{color:\"green\"}}> &#10004; </span></h5>\n                                </div>\n                            </div>\n                        </div>\n                        )}\n                    })}\n                </div>\n            </div>  \n        );\n    }\n}\n\nconst mapStateToProps = ({ contents = {} }) => ({\n    contents\n  });\nconst mapDispatchToProps = { fetchPageContent };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagestatus);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Pageslist.css';\nimport { addStatusPageUrl } from \"../actions\";\n\nclass Pageslist extends Component {\n    constructor() {\n        super()\n        this.state = {\n            url: ''\n        }\n    }\n\n    handlestatusPageChange = (e) => {\n        this.setState({url: e.target.value});\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addStatusPageUrl(this.state);\n        }\n\n    render() { \n        return (\n            <div className=\"container\">\n                <form onSubmit={e => this.checkLogin(e)}>\n                    <br></br>\n                    <input type = \"text\" name= \"statusPage\" value={ this.state.url } onChange={this.handlestatusPageChange} placeholder=\"\n                    Enter status Page URL and get real time Infos\"></input>\n                    <input type = \"submit\" value = \"Get Status\"></input>\n                    <br></br>\n                </form>\n                <br></br>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addStatusPageUrl: url => {\n        dispatch(addStatusPageUrl(url));\n      }\n    };\n  };\n  \n  export default connect(\n    null,\n    mapDispatchToProps\n  )(Pageslist);","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the PageStatus component to be used below\nimport Pagestatus from './Pagestatus/Pagestatus'\nimport Pageslist from './Pageslist/Pageslist'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n          <div className=\"topheader\">\n              <header className=\"container\">\n                  <nav className=\"navbar\">\n                      <div className=\"navbar-brand\">\n                          <span className=\"navbar-item\">StatusChecker</span>\n                      </div>\n                  </nav>\n              </header>\n          </div>\n          <section className=\"results--section\">\n              <div className=\"container\">\n                  <h1>StatusChecker displays live stats informations from websites</h1>\n              </div>\n              <div className=\"results--section__inner\">\n                  <Pageslist />\n                  <Pagestatus />\n              </div>\n          </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport contents from './contentReducer';\n\nexport default combineReducers({\n    contents: contents\n});","import { ADD_STATUS_PAGE_URL, FETCH_CONTENTS } from \"../actions/types\";\n\nexport default function contentReducer(state = [], action) {\n  switch (action.type) {\n      case FETCH_CONTENTS:\n      return action.contents;\n      case ADD_STATUS_PAGE_URL:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}